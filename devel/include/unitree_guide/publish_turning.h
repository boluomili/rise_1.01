// Generated by gencpp from file unitree_guide/publish_turning.msg
// DO NOT EDIT!


#ifndef UNITREE_GUIDE_MESSAGE_PUBLISH_TURNING_H
#define UNITREE_GUIDE_MESSAGE_PUBLISH_TURNING_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace unitree_guide
{
template <class ContainerAllocator>
struct publish_turning_
{
  typedef publish_turning_<ContainerAllocator> Type;

  publish_turning_()
    : q()
    , q_d()
    , w()
    , w_d()
    , err_q()
    , err_w()
    , disturbance()
    , dkexi()
    , U()  {
      q.assign(0.0);

      q_d.assign(0.0);

      w.assign(0.0);

      w_d.assign(0.0);

      err_q.assign(0.0);

      err_w.assign(0.0);

      disturbance.assign(0.0);

      dkexi.assign(0.0);

      U.assign(0.0);
  }
  publish_turning_(const ContainerAllocator& _alloc)
    : q()
    , q_d()
    , w()
    , w_d()
    , err_q()
    , err_w()
    , disturbance()
    , dkexi()
    , U()  {
  (void)_alloc;
      q.assign(0.0);

      q_d.assign(0.0);

      w.assign(0.0);

      w_d.assign(0.0);

      err_q.assign(0.0);

      err_w.assign(0.0);

      disturbance.assign(0.0);

      dkexi.assign(0.0);

      U.assign(0.0);
  }



   typedef boost::array<double, 3>  _q_type;
  _q_type q;

   typedef boost::array<double, 3>  _q_d_type;
  _q_d_type q_d;

   typedef boost::array<double, 3>  _w_type;
  _w_type w;

   typedef boost::array<double, 3>  _w_d_type;
  _w_d_type w_d;

   typedef boost::array<double, 3>  _err_q_type;
  _err_q_type err_q;

   typedef boost::array<double, 3>  _err_w_type;
  _err_w_type err_w;

   typedef boost::array<double, 3>  _disturbance_type;
  _disturbance_type disturbance;

   typedef boost::array<double, 3>  _dkexi_type;
  _dkexi_type dkexi;

   typedef boost::array<double, 3>  _U_type;
  _U_type U;





  typedef boost::shared_ptr< ::unitree_guide::publish_turning_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::unitree_guide::publish_turning_<ContainerAllocator> const> ConstPtr;

}; // struct publish_turning_

typedef ::unitree_guide::publish_turning_<std::allocator<void> > publish_turning;

typedef boost::shared_ptr< ::unitree_guide::publish_turning > publish_turningPtr;
typedef boost::shared_ptr< ::unitree_guide::publish_turning const> publish_turningConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::unitree_guide::publish_turning_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::unitree_guide::publish_turning_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::unitree_guide::publish_turning_<ContainerAllocator1> & lhs, const ::unitree_guide::publish_turning_<ContainerAllocator2> & rhs)
{
  return lhs.q == rhs.q &&
    lhs.q_d == rhs.q_d &&
    lhs.w == rhs.w &&
    lhs.w_d == rhs.w_d &&
    lhs.err_q == rhs.err_q &&
    lhs.err_w == rhs.err_w &&
    lhs.disturbance == rhs.disturbance &&
    lhs.dkexi == rhs.dkexi &&
    lhs.U == rhs.U;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::unitree_guide::publish_turning_<ContainerAllocator1> & lhs, const ::unitree_guide::publish_turning_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace unitree_guide

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::unitree_guide::publish_turning_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::unitree_guide::publish_turning_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::unitree_guide::publish_turning_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::unitree_guide::publish_turning_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::unitree_guide::publish_turning_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::unitree_guide::publish_turning_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::unitree_guide::publish_turning_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e4c34f17a8050a37a9187972a1aa7595";
  }

  static const char* value(const ::unitree_guide::publish_turning_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe4c34f17a8050a37ULL;
  static const uint64_t static_value2 = 0xa9187972a1aa7595ULL;
};

template<class ContainerAllocator>
struct DataType< ::unitree_guide::publish_turning_<ContainerAllocator> >
{
  static const char* value()
  {
    return "unitree_guide/publish_turning";
  }

  static const char* value(const ::unitree_guide::publish_turning_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::unitree_guide::publish_turning_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[3] q\n"
"float64[3] q_d\n"
"float64[3] w\n"
"float64[3] w_d\n"
"float64[3] err_q\n"
"float64[3] err_w\n"
"float64[3] disturbance\n"
"float64[3] dkexi\n"
"float64[3] U\n"
;
  }

  static const char* value(const ::unitree_guide::publish_turning_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::unitree_guide::publish_turning_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.q);
      stream.next(m.q_d);
      stream.next(m.w);
      stream.next(m.w_d);
      stream.next(m.err_q);
      stream.next(m.err_w);
      stream.next(m.disturbance);
      stream.next(m.dkexi);
      stream.next(m.U);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct publish_turning_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::unitree_guide::publish_turning_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::unitree_guide::publish_turning_<ContainerAllocator>& v)
  {
    s << indent << "q[]" << std::endl;
    for (size_t i = 0; i < v.q.size(); ++i)
    {
      s << indent << "  q[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.q[i]);
    }
    s << indent << "q_d[]" << std::endl;
    for (size_t i = 0; i < v.q_d.size(); ++i)
    {
      s << indent << "  q_d[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.q_d[i]);
    }
    s << indent << "w[]" << std::endl;
    for (size_t i = 0; i < v.w.size(); ++i)
    {
      s << indent << "  w[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.w[i]);
    }
    s << indent << "w_d[]" << std::endl;
    for (size_t i = 0; i < v.w_d.size(); ++i)
    {
      s << indent << "  w_d[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.w_d[i]);
    }
    s << indent << "err_q[]" << std::endl;
    for (size_t i = 0; i < v.err_q.size(); ++i)
    {
      s << indent << "  err_q[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.err_q[i]);
    }
    s << indent << "err_w[]" << std::endl;
    for (size_t i = 0; i < v.err_w.size(); ++i)
    {
      s << indent << "  err_w[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.err_w[i]);
    }
    s << indent << "disturbance[]" << std::endl;
    for (size_t i = 0; i < v.disturbance.size(); ++i)
    {
      s << indent << "  disturbance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.disturbance[i]);
    }
    s << indent << "dkexi[]" << std::endl;
    for (size_t i = 0; i < v.dkexi.size(); ++i)
    {
      s << indent << "  dkexi[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.dkexi[i]);
    }
    s << indent << "U[]" << std::endl;
    for (size_t i = 0; i < v.U.size(); ++i)
    {
      s << indent << "  U[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.U[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // UNITREE_GUIDE_MESSAGE_PUBLISH_TURNING_H

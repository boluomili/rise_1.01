# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from unitree_guide/publish_turning.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class publish_turning(genpy.Message):
  _md5sum = "e4c34f17a8050a37a9187972a1aa7595"
  _type = "unitree_guide/publish_turning"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64[3] q
float64[3] q_d
float64[3] w
float64[3] w_d
float64[3] err_q
float64[3] err_w
float64[3] disturbance
float64[3] dkexi
float64[3] U"""
  __slots__ = ['q','q_d','w','w_d','err_q','err_w','disturbance','dkexi','U']
  _slot_types = ['float64[3]','float64[3]','float64[3]','float64[3]','float64[3]','float64[3]','float64[3]','float64[3]','float64[3]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       q,q_d,w,w_d,err_q,err_w,disturbance,dkexi,U

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(publish_turning, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.q is None:
        self.q = [0.] * 3
      if self.q_d is None:
        self.q_d = [0.] * 3
      if self.w is None:
        self.w = [0.] * 3
      if self.w_d is None:
        self.w_d = [0.] * 3
      if self.err_q is None:
        self.err_q = [0.] * 3
      if self.err_w is None:
        self.err_w = [0.] * 3
      if self.disturbance is None:
        self.disturbance = [0.] * 3
      if self.dkexi is None:
        self.dkexi = [0.] * 3
      if self.U is None:
        self.U = [0.] * 3
    else:
      self.q = [0.] * 3
      self.q_d = [0.] * 3
      self.w = [0.] * 3
      self.w_d = [0.] * 3
      self.err_q = [0.] * 3
      self.err_w = [0.] * 3
      self.disturbance = [0.] * 3
      self.dkexi = [0.] * 3
      self.U = [0.] * 3

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_3d().pack(*self.q))
      buff.write(_get_struct_3d().pack(*self.q_d))
      buff.write(_get_struct_3d().pack(*self.w))
      buff.write(_get_struct_3d().pack(*self.w_d))
      buff.write(_get_struct_3d().pack(*self.err_q))
      buff.write(_get_struct_3d().pack(*self.err_w))
      buff.write(_get_struct_3d().pack(*self.disturbance))
      buff.write(_get_struct_3d().pack(*self.dkexi))
      buff.write(_get_struct_3d().pack(*self.U))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 24
      self.q = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.q_d = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.w = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.w_d = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.err_q = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.err_w = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.disturbance = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.dkexi = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.U = _get_struct_3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.q.tostring())
      buff.write(self.q_d.tostring())
      buff.write(self.w.tostring())
      buff.write(self.w_d.tostring())
      buff.write(self.err_q.tostring())
      buff.write(self.err_w.tostring())
      buff.write(self.disturbance.tostring())
      buff.write(self.dkexi.tostring())
      buff.write(self.U.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 24
      self.q = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.q_d = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.w = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.w_d = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.err_q = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.err_w = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.disturbance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.dkexi = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.U = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d

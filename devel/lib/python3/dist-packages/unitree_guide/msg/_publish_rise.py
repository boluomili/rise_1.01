# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from unitree_guide/publish_rise.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class publish_rise(genpy.Message):
  _md5sum = "4ce01dedb1e1719eddcff27609246b07"
  _type = "unitree_guide/publish_rise"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64[3] posError
float64[3] velError
float64[3] Error2
float64[3] Error2_0
float64[3] intergral
float64[3] miu_t
float64[3] templesgn
float64[3] templemiu
float64    data1
float64    data2
float64    data3
float64    data4
"""
  __slots__ = ['posError','velError','Error2','Error2_0','intergral','miu_t','templesgn','templemiu','data1','data2','data3','data4']
  _slot_types = ['float64[3]','float64[3]','float64[3]','float64[3]','float64[3]','float64[3]','float64[3]','float64[3]','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       posError,velError,Error2,Error2_0,intergral,miu_t,templesgn,templemiu,data1,data2,data3,data4

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(publish_rise, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.posError is None:
        self.posError = [0.] * 3
      if self.velError is None:
        self.velError = [0.] * 3
      if self.Error2 is None:
        self.Error2 = [0.] * 3
      if self.Error2_0 is None:
        self.Error2_0 = [0.] * 3
      if self.intergral is None:
        self.intergral = [0.] * 3
      if self.miu_t is None:
        self.miu_t = [0.] * 3
      if self.templesgn is None:
        self.templesgn = [0.] * 3
      if self.templemiu is None:
        self.templemiu = [0.] * 3
      if self.data1 is None:
        self.data1 = 0.
      if self.data2 is None:
        self.data2 = 0.
      if self.data3 is None:
        self.data3 = 0.
      if self.data4 is None:
        self.data4 = 0.
    else:
      self.posError = [0.] * 3
      self.velError = [0.] * 3
      self.Error2 = [0.] * 3
      self.Error2_0 = [0.] * 3
      self.intergral = [0.] * 3
      self.miu_t = [0.] * 3
      self.templesgn = [0.] * 3
      self.templemiu = [0.] * 3
      self.data1 = 0.
      self.data2 = 0.
      self.data3 = 0.
      self.data4 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_3d().pack(*self.posError))
      buff.write(_get_struct_3d().pack(*self.velError))
      buff.write(_get_struct_3d().pack(*self.Error2))
      buff.write(_get_struct_3d().pack(*self.Error2_0))
      buff.write(_get_struct_3d().pack(*self.intergral))
      buff.write(_get_struct_3d().pack(*self.miu_t))
      buff.write(_get_struct_3d().pack(*self.templesgn))
      buff.write(_get_struct_3d().pack(*self.templemiu))
      _x = self
      buff.write(_get_struct_4d().pack(_x.data1, _x.data2, _x.data3, _x.data4))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 24
      self.posError = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.velError = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.Error2 = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.Error2_0 = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.intergral = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.miu_t = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.templesgn = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.templemiu = _get_struct_3d().unpack(str[start:end])
      _x = self
      start = end
      end += 32
      (_x.data1, _x.data2, _x.data3, _x.data4,) = _get_struct_4d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.posError.tostring())
      buff.write(self.velError.tostring())
      buff.write(self.Error2.tostring())
      buff.write(self.Error2_0.tostring())
      buff.write(self.intergral.tostring())
      buff.write(self.miu_t.tostring())
      buff.write(self.templesgn.tostring())
      buff.write(self.templemiu.tostring())
      _x = self
      buff.write(_get_struct_4d().pack(_x.data1, _x.data2, _x.data3, _x.data4))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 24
      self.posError = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.velError = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.Error2 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.Error2_0 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.intergral = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.miu_t = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.templesgn = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.templemiu = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      _x = self
      start = end
      end += 32
      (_x.data1, _x.data2, _x.data3, _x.data4,) = _get_struct_4d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
